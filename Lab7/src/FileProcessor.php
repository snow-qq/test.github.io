<?php

namespace lab7;

class FileProcessor {
    private $currentDirectory;
    private $logFile;
    private $indentLevel = 0;
    
    public function __construct() {
        $this->currentDirectory = __DIR__ . '/../test_files';
        $this->logFile = __DIR__ . '/../processing.log';
        file_put_contents($this->logFile, "\n" . str_repeat('=', 50) . "\n");
        file_put_contents($this->logFile, "–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: " . date('Y-m-d H:i:s') . "\n");
        file_put_contents($this->logFile, str_repeat('=', 50) . "\n\n");
        
        if (!is_dir($this->currentDirectory)) {
            $this->log("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è test_files –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", 'error');
            exit;
        }
    }
    
    private function log($message, $type = 'info') {
        $indent = str_repeat('  ', $this->indentLevel);
        $prefix = '';
        
        switch ($type) {
            case 'dir':
                $prefix = 'üìÅ ';
                break;
            case 'file':
                $prefix = 'üìÑ ';
                break;
            case 'warning':
                $prefix = '‚ö†Ô∏è ';
                break;
            case 'success':
                $prefix = '‚úÖ ';
                break;
            case 'error':
                $prefix = '‚ùå ';
                break;
            default:
                $prefix = '‚ÑπÔ∏è ';
        }
        
        $logMessage = date('Y-m-d H:i:s') . " | " . $indent . $prefix . $message . "\n";
        file_put_contents($this->logFile, $logMessage, FILE_APPEND);
        echo $logMessage;
    }
    
    public function processFiles() {
        $this->log("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: " . $this->currentDirectory, 'dir');
        $this->scanDirectory($this->currentDirectory);
        $this->log("\n" . str_repeat('=', 50) . "\n");
        $this->log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏", 'success');
        $this->log(str_repeat('=', 50) . "\n");
    }
    
    private function scanDirectory($directory) {
        $this->indentLevel++;
        $this->log("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: " . $directory, 'dir');
        $files = scandir($directory);
        
        foreach ($files as $file) {
            if ($file === '.' || $file === '..') {
                continue;
            }
            
            $fullPath = $directory . DIRECTORY_SEPARATOR . $file;
            
            if (is_dir($fullPath)) {
                $this->log("–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: " . $fullPath, 'dir');
                $this->scanDirectory($fullPath);
                continue;
            }
            
            if ($this->shouldProcessFile($fullPath)) {
                $this->log("–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª: " . $fullPath, 'file');
                $this->processFile($fullPath);
            }
        }
        $this->indentLevel--;
    }
    
    private function shouldProcessFile($filePath) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if (pathinfo($filePath, PATHINFO_EXTENSION) !== 'c') {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏ –∏ –¥–≤—É—Ö –±—É–∫–≤)
        $fileName = basename($filePath);
        if (!preg_match('/^\.[a-zA-Z]{2}/', $fileName)) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–º–ª–∞–¥—à–µ –Ω–µ–¥–µ–ª–∏)
        if (time() - filemtime($filePath) > 7 * 24 * 60 * 60) {
            $this->log("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π: " . $filePath, 'warning');
            return false;
        }
        
        // –í Windows –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–Ω–∞—á–µ
        return true;
    }
    
    private function processFile($filePath) {
        if (!file_exists($filePath)) {
            $this->log("–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: " . $filePath, 'error');
            return;
        }

        $content = file_get_contents($filePath);
        if ($content === false) {
            $this->log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: " . $filePath, 'error');
            return;
        }

        $maxBrackets = $this->countMaxNestedBrackets($content);
        $this->log("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: $filePath (–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫: $maxBrackets)", 'info');
        
        if ($maxBrackets > 2) {
            try {
                if (unlink($filePath)) {
                    $this->log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: " . $filePath, 'success');
                } else {
                    $this->log("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: " . $filePath, 'error');
                }
            } catch (\Exception $e) {
                $this->log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " . $filePath . " (" . $e->getMessage() . ")", 'error');
            }
        } else {
            $this->log("–§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏—è (–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫: $maxBrackets): $filePath", 'success');
        }
    }
    
    private function countMaxNestedBrackets($content) {
        $maxDepth = 0;
        $currentDepth = 0;
        
        for ($i = 0; $i < strlen($content); $i++) {
            if ($content[$i] === '{') {
                $currentDepth++;
                $maxDepth = max($maxDepth, $currentDepth);
            } elseif ($content[$i] === '}') {
                $currentDepth--;
            }
        }
        
        return $maxDepth;
    }
} 